package sfa.model.entities;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.*;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 05 16:29:33 IST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class InviteesImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Inviteeid,
        Name,
        Type,
        Appoinmentid,
        Contactid,
        Appointments,
        Customercontacts;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int INVITEEID = AttributesEnum.Inviteeid.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int TYPE = AttributesEnum.Type.index();
    public static final int APPOINMENTID = AttributesEnum.Appoinmentid.index();
    public static final int CONTACTID = AttributesEnum.Contactid.index();
    public static final int APPOINTMENTS = AttributesEnum.Appointments.index();
    public static final int CUSTOMERCONTACTS = AttributesEnum.Customercontacts.index();

    /**
     * This is the default constructor (do not remove).
     */
    public InviteesImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("sfa.model.entities.Invitees");
    }


    /**
     * Gets the attribute value for Inviteeid, using the alias name Inviteeid.
     * @return the value of Inviteeid
     */
    public BigDecimal getInviteeid() {
        return (BigDecimal) getAttributeInternal(INVITEEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Inviteeid.
     * @param value value to set the Inviteeid
     */
    public void setInviteeid(BigDecimal value) {
        setAttributeInternal(INVITEEID, value);
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the value of Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for Type, using the alias name Type.
     * @return the value of Type
     */
    public String getType() {
        return (String) getAttributeInternal(TYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Type.
     * @param value value to set the Type
     */
    public void setType(String value) {
        setAttributeInternal(TYPE, value);
    }

    /**
     * Gets the attribute value for Appoinmentid, using the alias name Appoinmentid.
     * @return the value of Appoinmentid
     */
    public BigDecimal getAppoinmentid() {
        return (BigDecimal) getAttributeInternal(APPOINMENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Appoinmentid.
     * @param value value to set the Appoinmentid
     */
    public void setAppoinmentid(BigDecimal value) {
        setAttributeInternal(APPOINMENTID, value);
    }

    /**
     * Gets the attribute value for Contactid, using the alias name Contactid.
     * @return the value of Contactid
     */
    public BigDecimal getContactid() {
        return (BigDecimal) getAttributeInternal(CONTACTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Contactid.
     * @param value value to set the Contactid
     */
    public void setContactid(BigDecimal value) {
        setAttributeInternal(CONTACTID, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getAppointments() {
        return (EntityImpl) getAttributeInternal(APPOINTMENTS);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setAppointments(EntityImpl value) {
        setAttributeInternal(APPOINTMENTS, value);
    }


    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getCustomercontacts() {
        return (EntityImpl) getAttributeInternal(CUSTOMERCONTACTS);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setCustomercontacts(EntityImpl value) {
        setAttributeInternal(CUSTOMERCONTACTS, value);
    }


    /**
     * @param inviteeid key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal inviteeid) {
        return new Key(new Object[] { inviteeid });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("COMMONSEQUENCE", getDBTransaction().getRootApplicationModule());
        BigDecimal noteid = new BigDecimal(seq.getSequenceNumber().toString());
        setInviteeid(noteid);
    }
}

